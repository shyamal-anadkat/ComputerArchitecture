// Write your answer to Problem 2 (b) and (c) here


2 (b) Without branch prediction for beqz, we won't be able to fetch new instructions leading to stalling and a control hazard. We resolve a control/branch hazard by predicting which path will be taken in order to avoid stalling and wasting cpu clock cycles. If we assume the branch isn't taken and fetch next instructions, we save cpu cycles if the prediction is correct. For the code, to implement branch prediction we predict the branch [beqz r3, 2] is not taken, send sequential instructions down the pipeline (and and add) and since branch is taken we repeat add and flush the previous two instructions/discard them.

2 (c) No, branch prediction can take multiple cycles. For example, if an add instruction after branch produces one of the operands for comparison, we will need a stall as the execute stage for ALU will happen after the ID cycle of the branch. If there is a load and a conditional branch that relies on the load result, we will need 2 cycles. 
